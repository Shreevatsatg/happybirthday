
create table birthdays (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  name text not null,
  date text not null,
  note text,
  "group" text default 'other' check ("group" in ('family', 'friend', 'work', 'other')),
  linked_contact_id text,
  contact_phone_number text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  is_synced boolean default true,
  is_deleted boolean default false
);

alter table birthdays enable row level security;

create policy "Users can view their own birthdays." on birthdays for select using (auth.uid() = user_id);
create policy "Users can create their own birthdays." on birthdays for insert with check (auth.uid() = user_id);
create policy "Users can update their own birthdays." on birthdays for update using (auth.uid() = user_id);
create policy "Users can delete their own birthdays." on birthdays for delete using (auth.uid() = user_id);
